services:
  db:
    image: "postgres:16"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=db
    volumes:
      - ./init:/docker-entrypoint-initdb.d/
    networks:
      - otus

  discovery:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/discovery/
      dockerfile: Dockerfile
    depends_on:
      - db
    hostname: discovery
    container_name: discovery
    restart: "no"
    ports:
      - "8761:8761"
    networks:
      - otus
    environment:
      LOKI: http://loki:3100
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      AUTH: false

  gateway:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/gateway/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: gateway
    container_name: gateway
    restart: "no"
    ports:
      - "9000:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      LOKI: http://loki:3100
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      AUTH: fals

  prometheus:
    image: prom/prometheus
    depends_on:
      - discovery
    container_name: prometheus
    hostname: prometheus
    ports:
      - 9090:9090
    networks:
      - otus
    volumes:
      - ./infra/prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./infra/grafana/:/etc/grafana/provisioning/
    env_file:
      - ./infra/grafana/config.monitoring
    networks:
      - otus
    restart: always

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    hostname: loki
    depends_on:
      - prometheus
    ports:
      - "3100:3100"
    volumes:
      - ./infra/prometheus/loki.yml:/etc/loki/local-config.yaml
    command:  --validation.allow-structured-metadata=false -config.file=/etc/loki/local-config.yaml
    networks:
      - otus

  client:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/client/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: client
    container_name: client
    restart: "no"
    ports:
      - "9002:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db?currentSchema=client
      SPRING_LIQUIBASE_URL: jdbc:postgresql://db:5432/db?currentSchema=client
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

  contract:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/contract/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: contract
    container_name: contract
    restart: "no"
    ports:
      - "9003:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db?currentSchema=contract
      SPRING_LIQUIBASE_URL: jdbc:postgresql://db:5432/db?currentSchema=contract
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

  dictionary:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/dictionary/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: dictionary
    container_name: dictionary
    restart: "no"
    ports:
      - "9004:9003"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      GRPC_SERVER_PORT: 9003
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db?currentSchema=dictionary
      SPRING_LIQUIBASE_URL: jdbc:postgresql://db:5432/db?currentSchema=dictionary
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

  pledge:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/pledge/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: pledge
    container_name: pledge
    restart: "no"
    ports:
      - "9005:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db?currentSchema=pledge
      SPRING_LIQUIBASE_URL: jdbc:postgresql://db:5432/db?currentSchema=pledge
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCES_CONSUMER_ID: pledge

  root:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/rootApp/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: root
    container_name: root
    restart: "no"
    ports:
      - "9006:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false

  pledgemonitoring:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/pledgeMonitoring/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: pledgemonitoring
    container_name: pledgemonitoring
    restart: "no"
    ports:
      - "9007:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db?currentSchema=pledge_monitoring
      SPRING_LIQUIBASE_URL: jdbc:postgresql://db:5432/db?currentSchema=pledge_monitoring
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_GROUP_ID: pledgeMonitoring

  task:
    build:
      context: /Users/alpatov/ru.otus.java.advanced/task/
      dockerfile: Dockerfile
    depends_on:
      - discovery
    hostname: task
    container_name: task
    restart: "no"
    ports:
      - "9009:8080"
    networks:
      - otus
    environment:
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8080
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery:8761/eureka
      LOKI: http://loki:3100
      AUTH: false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db?currentSchema=task
      SPRING_LIQUIBASE_URL: jdbc:postgresql://db:5432/db?currentSchema=task
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    networks:
      - otus
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    networks:
      - otus
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
      - 9997:9997
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka

  kafka_ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    networks:
      - otus
    ports:
      - 9008:8080
    restart: always
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
    links:
      - kafka
      - zookeeper

networks:
  otus:
    driver: bridge